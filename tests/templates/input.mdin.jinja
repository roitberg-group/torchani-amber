! TorchANI-Amber test input
&cntrl
    {% if mlmm %}
    ifqnt = 1  ! Use QM/MM
    {% else %}
    iextpot = 2  ! Use an external potential
    {% endif %}
    imin = 0  ! Dynamics
    nstlim = 5  ! Total num of dynamics steps
    ntx = 1  ! Only read input coords, not vels
    {% if netcdf %}
    ntxo = 2  ! Dump restart as netCDF
    ioutfm = 1  ! Dump traj as netCDF
    {% else %}
    ntxo = 1  ! Dump restart as ASCII
    ioutfm = 0  ! Dump traj as ASCII
    {% endif %}
    ntwx = 1  ! Dump coords every step
    ntpr = 1  ! Dump mdout 'logs' every step
    dt = 0.001  ! Timestep (ns)
    {% if shake %}
    ntc = 2  ! Shake ON
    ntf = 2  ! Shake ON
    {% else %}
    ntc = 1  ! Shake OFF
    ntf = 1  ! Shake OFF
    {% endif %}
    ig = 5541  ! Manual seed for reproducibility
    {% if vacuum %}
    cut = 9999.0  ! Non-bonded neighborlist cutoff
    igb = 6  ! Vacuum, no PBC
    {% else %}
    cut = 8.0  !  Non-bonded neighborlist cutoff
    {% endif %}
/
{% if mlmm %}
&qmmm
    qm_theory = "EXTERN"  ! Required for all ML/MM TorchANI-Amber dynamics
    qm_ewald = 0  ! Required for Sander EXTERN QM/MM
    qmmask = ":1"  ! Select the first molecule as the QM-region
    qmcut = 8.0  ! 15.0 is recommended, 8.0 used for tests
/
{% else %}
&extpot
    extprog = "TORCHANI"  ! External program is TorchANI-Amber
/
{% endif %}
&ani
{% if cuda %}
    cuda_device_index = 0
    use_cuda_device = .True.
    {% if not legacy %}
    use_cuaev = .{{ cuda.cuaev }}.
    {% endif %}
{% else %}
    use_cuda_device = .False.
{% endif %}
    model_type = "animbis"  ! ANI-mbis can be used for all kinds of dynamics
    use_double_precision = .{{ float64 }}.
{% if mlmm %}
    {% if mlmm.use_torch_coupling %}
    use_torch_coupling=.True.
    {% else %}
    use_torch_coupling=.False.
    {% endif %}
    {% if mlmm.protocol == "me" %}
    use_torchani_charges = .False.
        {% if not legacy %}
    mlmm_coupling = 0  ! Coulombic coupling
        {% else %}
    use_charges_derivatives = .False.
    polarize_qm_charges = .False.
    distort_qm_energy = .False.
        {% endif %}
    {% else %}
    use_torchani_charges = .True.
        {% if not legacy %}
    mlmm_coupling = 1  ! Simple polarizable coupling
        {% else %}
    use_charges_derivatives = .True.
    polarize_qm_charges = .True.
    distort_qm_energy = .True.
        {% endif %}
    {% endif %}
    write_charges = .True.
    {% if not legacy %}
    write_charges_grad = .True.
    {% endif %}
    write_forces = .True.
    write_xyz = .True.
{% endif %}
    model_index = -1
    {% if not legacy %}
    use_amber_neighborlist = .{{ use_amber_neighborlist }}.
    {% endif %}
/
! End TorchANI-Amber test input
